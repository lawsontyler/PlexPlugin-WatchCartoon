import urllib2
import base64
import re

# I know, bad things happen when using the library directly.  There are multiple redirects.  Let's get the last one.

######################################################################################

BASE_URL = 'https://www.watchcartoononline.io/'
ICON_COVER = "icon-cover.png"

######################################################################################
# Removes weird Characters from string
def FixString(str):
    str = str.encode('ascii', 'xmlcharrefreplace')
    str = String.Unquote(str)
    str = str.replace("&amp;","&")
    str = str.replace("&#8211;","-")
    str = str.replace("&#8217;","'")
    return str

######################################################################################
# Pulls show name from show_url to add to show_title

def getEpisodeThumbnail(episode_url):
    Log("getEpisodeThumbnail: %s" % episode_url)
    page_data = HTML.ElementFromURL(episode_url)

    try:
        episode_thumb = page_data.xpath("//meta[@property='og:image']/@content")[0]
    except:
        episode_thumb = R(ICON_COVER)

    return episode_thumb

def MetadataObjectForURL(url):
    Log("MetadataObjectForURL: %s" % url)

    page_data = HTML.ElementFromURL(url)
    try:
        show_title = page_data.xpath("//title/text()")[0]
        show_title = show_title.replace("| Watch cartoons online, Watch anime online, English dub anime","")
    except:
        show_title = "N/A"

    episode_thumb = getEpisodeThumbnail(url)

    try:
        show_desc = FixString(page_data.xpath("//meta[@name='description']/@content")[0])
        show_sum = HTML.StringFromElement(page_data.xpath("//div[@class='iltext']/p")[0])
        show_sum = String.StripTags(show_sum)
        show_sum = show_sum.splitlines()[0]
        show_sum = FixString(show_sum)
        show_sum = show_sum.replace(show_desc, "")
    except:
        show_sum = ""

    return EpisodeObject(
        title = show_title,
        summary = show_sum,
        thumb = episode_thumb
    )

def MediaObjectsForURL(url):
    """All videos vary in codec and must be transcoded."""

    Log("MediaObjectsForURL: " + url)

    return [MediaObject(
        audio_codec = AudioCodec.AAC,
        video_codec = VideoCodec.H264,
        parts = [PartObject(key=Callback(playVideoUrlFromIframe, url = url))]
    )]


def getVideoUrlFromiFrameURL(iframe_url):
    Log("IFrame URL: %s" % iframe_url)

    video_url = ""

    if iframe_url.find("embed.php") > 0:
        Log("Found new-style iFrame URL: " + str(iframe_url))

        iframe_data = HTTP.Request(BASE_URL + iframe_url).content

        original_start_index = iframe_data.find("src: 'http")
        video_url_json_start_index = iframe_data.find("src: 'http", original_start_index + 1)
        if video_url_json_start_index == -1:
            video_url_json_start_index = original_start_index

        if video_url_json_start_index > -1:
            # Offset the 'file: "' bit.
            video_url_json_start_index += 6
            Log("Found at position: " + str(video_url_json_start_index))

            # Find the end of the JSON string...
            video_url_json_end_index = iframe_data.find("'", video_url_json_start_index)
            Log("End position is: " + str(video_url_json_end_index))

            video_url = iframe_data[video_url_json_start_index:video_url_json_end_index]

    return video_url

def playVideoUrlFromIframe(url):
    """Builds list of streams and plays using index from url"""

    Log("playVideoUrlFromIframe")
    page_data = HTML.ElementFromURL(url)
    video_url = ""

    Log("Got the page")
    meta_url = page_data.xpath("//meta[@itemprop='embedURL']/@content")[0]
    Log("Meta URL: %s" % meta_url)

    if meta_url:
        Log('They tried to get sneaky and use JS to load it in.  Ok, then.  Game on.')
        script_data_full = page_data.xpath("//meta[@itemprop='embedURL']/following-sibling::script[1]/text()")[0]

        data_array_open = script_data_full.find('[') + 1
        data_array_close = script_data_full.rfind(']')
        # magic_number_index = script_data_full.rfind('-') + 1

        magic_number = re.search(r"- (\d+)", script_data_full)
        magic_number = int(magic_number.group(1))

        script_data = script_data_full[data_array_open:data_array_close].replace('"', '').replace(' ', '').split(',')
        script_data = map(base64.decodestring, script_data)
        script_data = map(lambda s: re.sub(r"\D", "", s), script_data)
        script_data = map(lambda i: chr(int(i) - magic_number), script_data)
        script_data = "".join(script_data)
        parts = script_data.partition("</iframe>")
        script_data = parts[0] + parts[1]

        iframe = HTML.ElementFromString(script_data)
        iframe_url = iframe.attrib.get("src")[1:]

        Log("Real iFrame URL: %s" % iframe_url)

        video_url = getVideoUrlFromiFrameURL(iframe_url)

    else:
        Log("Old-style embed")
        iframes = page_data.xpath("//iframe/@src")
        Log(iframes)

        for iframe_url in iframes:
            video_url = getVideoUrlFromiFrameURL(iframe_url)

            if video_url:
                break

    Log("video_url: %s" % video_url)

    if video_url:
        return Redirect(video_url)

    return None
